1 Main:

package pooguia8;

import Entidades.Cafetera;
import Servicio.CafeteraServicio;

/**
 *
 * @author 54375
 */
public class PooGuia8 {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Cafetera m=new Cafetera();
        CafeteraServicio x=new CafeteraServicio();
        x.llenarCafetera(m);
        x.servirTaza(m);
        x.vaciarCafetera(m);
        x.agegarCafe(m);
        System.out.println("La cantidad de cafe en la cafetera es: "+ m.getCantidadActual());
        
    }
    

2 Entidades:

package Entidades;

/**
 * Programa Nespresso. Desarrolle una clase Cafetera en el paquete Entidades con
 * los atributos capacidadMáxima (la cantidad máxima de café que puede contener
 * la cafetera) y cantidadActual (la cantidad actual de café que hay en la
 * cafetera). Agregar constructor vacío y con parámetros así como setters y
 * getters. Crear clase CafeteraServicio en el paquete Servicios con los
 * siguiente:
 */
public class Cafetera {

    private int capacidadMáxima;
    private int cantidadActual;

    public Cafetera() {
    }

    public Cafetera(int capacidadMáxima, int cantidadActual) {
        this.capacidadMáxima = capacidadMáxima;
        this.cantidadActual = cantidadActual;
    }

    public int getCapacidadMáxima() {
        return capacidadMáxima;
    }

    public void setCapacidadMáxima(int capacidadMáxima) {
        this.capacidadMáxima = capacidadMáxima;
    }

    public int getCantidadActual() {
        return cantidadActual;
    }

    public void setCantidadActual(int cantidadActual) {
        this.cantidadActual = cantidadActual;
    }
    
    
    
    
}

3 Servicios



package Servicio;

import Entidades.Cafetera;
import java.util.Scanner;

/**
 * Método llenarCafetera(): hace que la cantidad actual sea igual a
 * la capacidad máxima. Método servirTaza(int): se pide el tamaño de una taza
 * vacía, el método recibe el tamaño de la taza y simula la acción de servir la
 * taza con la capacidad indicada. Si la cantidad actual de café “no alcanza”
 * para llenar la taza, se sirve lo que quede. El método le informará al usuario
 * si se llenó o no la taza, y de no haberse llenado en cuanto quedó la taza.
 * Método vaciarCafetera(): pone la cantidad de café actual en cero. Método
 * agregarCafe(int): se le pide al usuario una cantidad de café, el método lo
 * recibe y se añade a la cafetera la cantidad de café indicada.
 *
 */
public class CafeteraServicio {
    
    
    Scanner Sc = new Scanner(System.in);
    
 public void llenarCafetera(Cafetera c){
     c.setCapacidadMáxima(100);
     c.setCantidadActual(c.getCapacidadMáxima());
 }   
    
  public void servirTaza(Cafetera c){
      
      System.out.println("Ingrese el tamaño de la taza");
      int tamaño=Sc.nextInt();
      if (tamaño>c.getCantidadActual()) {
          System.out.println("El tamaño de la taza es mayor a la capacidad maxima de cafe");
          System.out.println("Se le servira la capacidad maxima "+c.getCantidadActual());
          c.setCantidadActual(0);
        
      }else {
          c.setCantidadActual(-tamaño);
      }
  }

public void vaciarCafetera(Cafetera c){
    c.setCantidadActual(0);
}  

public void agegarCafe(Cafetera c){
    System.out.println("Ingrese la cantidad de cafe a rellenar");
    int llenar=Sc.nextInt();
    
    if (llenar+c.getCantidadActual()<=c.getCapacidadMáxima()) {
          c.setCantidadActual(llenar);
    }else{   
        System.out.println("La cantidad indicada exede el maximo");
    }
    
}
}

